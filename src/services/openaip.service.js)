const axios = require('axios');
const crypto = require('crypto');
const { OPENAIP_API_KEY, NODE_ENV } = process.env;

class OpenAIPService {
  constructor() {
    this.client = axios.create({
      baseURL: 'https://api.core.openaip.net/api',
      timeout: 8000,
      headers: {
        'x-openaip-api-key': OPENAIP_API_KEY, // Primary auth method
        'Accept': 'application/vnd.openaip+json',
        'User-Agent': 'AeroBridge/1.0 (Granava Aviation)'
      }
    });

    // Request interceptor for fallback auth
    this.client.interceptors.request.use(config => {
      if (!config.headers['x-openaip-api-key']) {
        config.params = { ...config.params, apiKey: OPENAIP_API_KEY };
      }
      return config;
    });
  }

  async getAviationData(endpoint, params = {}) {
    try {
      const requestHash = crypto.createHash('sha256')
        .update(JSON.stringify(params))
        .digest('hex');

      const response = await this.client.get(endpoint, {
        params,
        headers: {
          'X-Request-ID': requestHash
        }
      });

      return {
        data: response.data,
        metadata: {
          apiVersion: response.headers['x-openaip-version'],
          requestId: requestHash
        }
      };
    } catch (error) {
      this._handleError(error);
    }
  }

  _handleError(error) {
    if (error.response) {
      // OpenAIP-specific error format
      throw new Error(`OpenAIP Error ${error.response.status}: 
        ${error.response.data?.message || 'Unknown error'}`);
    }
    throw new Error(`Network error: ${error.message}`);
  }
}

// Singleton pattern with env validation
if (!OPENAIP_API_KEY && NODE_ENV !== 'test') {
  throw new Error('Missing required OPENAIP_API_KEY environment variable');
}

module.exports = new OpenAIPService();
